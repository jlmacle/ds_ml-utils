# Generated by ChatGPT

class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False
        self.nbr_of_words = 0


class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True
        self.root.nbr_of_words +=1

    def search(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.is_end_of_word

    def starts_with(self, prefix):
        node = self.root
        for char in prefix:
            if char not in node.children:
                return False
            node = node.children[char]
        return True

    def print_alphabetical(self):
        self._inorder_traversal(self.root, "")

    def print_alphabetical_to_string(self):
        return self._inorder_traversal_to_string(self.root, "")

    def _inorder_traversal(self, node, prefix):
        if node.is_end_of_word:
            print(prefix)
        
        for char, child in sorted(node.children.items()):
            self._inorder_traversal(child, prefix + char)

    def _inorder_traversal_to_string(self, node, prefix):
        result = ""
        
        if node.is_end_of_word:
            result += prefix + "\n"
        
        for char, child in sorted(node.children.items()):
            child_result = self._inorder_traversal_to_string(child, prefix + char)
            if child_result is not None:
                result += child_result
        
        return result

    def get_nbr_of_words(self):
        return self.root.nbr_of_words